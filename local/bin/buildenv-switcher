#!/usr/bin/env python3

import os
import subprocess
import argparse
import json
import sys

CONFIG_FILE=os.path.expanduser("~/.config/buildenv_switcher/build-env.json")

parser = argparse.ArgumentParser("build-env")

parser.add_argument("name", metavar="NAME", type=str,
        help="Environment name")


args = parser.parse_args()

# Read config

json_config = None

with open(CONFIG_FILE, "r") as fd:
    json_config = json.load(fd)

    
# Check if the requested environment is present
if args.name not in json_config:
    print("Error, environment {} not in config file".format(args.name))
    sys.exit(1)

# Iterate through all entries
for variable in json_config[args.name].keys():
    # If the mode is prepend, we add the value at the begining of
    #  the variable. If the variable does not exists, we create it
    if json_config[args.name][variable]['mode'] == "prepend":
        if variable in os.environ:
            os.environ[variable] = json_config[args.name][variable]['value'] + ":" + os.environ[variable]
        else:
            os.environ[variable] = json_config[args.name][variable]['value']
    # If the mode is new, the value is created. If the value already exists, it is
    #  overwritten
    elif json_config[args.name][variable]['mode'] == "new":
        os.environ[variable] = json_config[args.name][variable]['value']

# Finally, put the environment in the shell
os.environ["BUILD_ENV"] = args.name

# environment is set, we can spawn the process
try:
    subprocess.check_call("/usr/bin/zsh")
except subprocess.CalledProcessError as e:
    print("Command {cmd} returned code {rc}".format(cmd=e.cmd,rc=e.returncode))

print("Exiting shell environment {}".format(args.name))
